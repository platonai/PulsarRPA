name: Release

on:
  push:
    tags:
      - "v*"
    paths-ignore:
      - '**.md'
      - 'docs/**'
  # Allow manual workflow runs
  workflow_dispatch:

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Test Sonatype login via API
        run: |
          curl -u "${{ secrets.SONATYPE_USERNAME }}:${{ secrets.SONATYPE_PASSWORD }}" \
          -X GET "https://oss.sonatype.org/service/local/status"

      - name: Check if DEEPSEEK_API_KEY is set
        run: |
          if [ -z "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
            echo "DEEPSEEK_API_KEY is not set. Exiting."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'

      - name: Check settings.xml
        run: |
          cat ~/.m2/settings.xml
          # make sure the settings.xml is correctly configured
          if (! grep -q "<id>ossrh</id>" ~/.m2/settings.xml); then
            echo "settings.xml is not configured correctly for Sonatype OSSRH."
            exit 1
          fi
          if (! grep -q "<passphrase>${env.GPG_PASSPHRASE}</passphrase>" ~/.m2/settings.xml); then
            echo "settings.xml is not configured correctly for gpg-passphrase."
            exit 1
          fi

      - name: Update Version
        run: |
          chmod +x bin/update-version.sh
          bin/update-version.sh

      - name: Cache Maven wrapper
        uses: actions/cache@v3
        with:
          path: .mvn/wrapper
          key: ${{ runner.os }}-maven-wrapper-${{ hashFiles('**/maven-wrapper.properties') }}

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven build and deploy to local repo
        run: |
          chmod +x ./mvnw
          ./mvnw clean install -DskipTests

#      - name: Run Tests
#        run: ./mvnw test -Pall-modules

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Test Docker container
        run: |
          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
          sleep 10  # Wait for Spring Boot to start
          find bin/ -name "*.sh" -exec chmod +x {} \;
          ./bin/run-integration-test.sh || (echo "Integration test failed" && exit 1)
          docker stop pulsar-rpa-test || true
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

#      - name: Create GitHub Release
#        id: create_release
#        uses: softprops/action-gh-release@v1
#        with:
#          name: Release ${{ env.TAG }}
#          draft: false
#          prerelease: false
#          generate_release_notes: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:$VERSION || (echo "Failed to push version tag" && exit 1)
          docker push $IMAGE_NAME:latest || (echo "Failed to push latest tag" && exit 1)

      - name: Deploy to Sonatype OSSRH
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          ./mvnw deploy -Pplaton-release -Pplaton-deploy -DskipTests -B \
            -DDEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} \
            -Dossrh.username=${SONATYPE_USERNAME} \
            -Dossrh.password=${SONATYPE_PASSWORD} \
            -Dgpg.passphrase=${GPG_PASSPHRASE}

        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
