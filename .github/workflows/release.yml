name: Release

on:
  push:
    tags:
      - "v*"
    paths-ignore:
      - 'bin/**'
      - 'docs/**'
      - 'docker/**'
      - '**.md'
  # Allow manual workflow runs
  workflow_dispatch:

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Import and Verify GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Correct Permissions
        run: |
          find bin/ -name "*.sh" | xargs chmod +x
          chmod +x ./mvnw

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update Version
        run: |
          chmod +x bin/release/update-versions.sh
          bin/release/update-versions.sh

      - name: Validate External Dependencies
        run: |
          # Test Sonatype connection
          echo "=== Testing Sonatype Connection ==="
          curl -f -u "${{ secrets.SONATYPE_USERNAME }}:${{ secrets.SONATYPE_PASSWORD }}" \
            -X GET "https://oss.sonatype.org/service/local/status"
          
          # Check required secrets
          echo "=== Checking Required Secrets ==="
          if [ -z "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
            echo "❌ DEEPSEEK_API_KEY is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Validate Maven Settings
        run: |
          echo "=== Validating Maven Settings ==="
          if ! grep -q "<id>ossrh</id>" ~/.m2/settings.xml; then
            echo "❌ settings.xml missing OSSRH configuration"
            exit 1
          fi
          if ! grep -E "<passphrase>.+</passphrase>" ~/.m2/settings.xml; then
            echo "❌ settings.xml missing GPG passphrase configuration"
            exit 1
          fi
          echo "✅ Maven settings validation successful"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven Build
        run: |
          ./mvnw clean install -DskipTests

      - name: Test GPG Signing
        run: |
          echo "=== Testing GPG Signing ==="
          # Test basic GPG functionality
          echo "test signing" | gpg --clearsign --batch --yes --pinentry-mode loopback \
            --passphrase "$GPG_PASSPHRASE"
          
          # Test Maven GPG plugin
          ./mvnw package gpg:sign -DskipTests -q \
            -Dgpg.passphrase="$GPG_PASSPHRASE" \
            -Dgpg.batch=true \
            -Dgpg.pinentry-mode=loopback
          
          # Verify signatures were created
          echo "Generated signature files:"
          find . -name "*.asc" -type f | head -10
          echo "✅ GPG signing test successful"
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .
      

#      - name: Test Docker container
#        if: success()
#        run: |
#          # Start container
#          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
#          sleep 10  # Wait for Spring Boot to start
#
#          # Run integration tests
#          find bin/ -name "*.sh" -exec chmod +x {} \;
#          if ! ./bin/run-integration-test.sh; then
#            echo "Integration test failed"
#            docker logs pulsar-rpa-test
#            docker stop pulsar-rpa-test || true
#            exit 1
#          fi
#
#          # Clean up
#          docker stop pulsar-rpa-test || true
#        env:
#          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Set up JDK 17 For Deployment
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Check settings.xml
        run: |
          echo "=== Checking settings.xml ==="
          cat ~/.m2/settings.xml || echo "settings.xml not found"
          
          if [ ! -f ~/.m2/settings.xml ]; then
            echo "❌ settings.xml not found"
            exit 1
          fi
          if ! grep -q "<id>ossrh</id>" ~/.m2/settings.xml; then
            echo "❌ OSSRH repository not configured in settings.xml"
            exit 1
          fi
          if ! grep -q "<passphrase>.+</passphrase>" ~/.m2/settings.xml; then
            echo "❌ GPG passphrase not configured in settings.xml"
            exit 1
          fi
          echo "✅ settings.xml validation successful"

      - name: Deploy to Sonatype OSSRH
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "=== Deploying to Maven Central ==="
          ./mvnw --batch-mode deploy -P deploy,release -DskipTests \
            -Dgpg.passphrase="$GPG_PASSPHRASE" \
            -Dgpg.batch=true \
            -Dgpg.pinentry-mode=loopback \
            -DrepositoryId=ossrh \
            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 \
            --show-version --errors
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: Build PulsarRPA JAR
        if: success()
        run: |
          echo "=== Building PulsarRPA JAR ==="
          ./mvnw package -rf :pulsar-master -pl pulsar-app/pulsar-master \
            -DskipTests=true -Dmaven.javadoc.skip=true
          
          JAR_PATH="pulsar-app/pulsar-master/target/PulsarRPA.jar"
          if [ ! -f "$JAR_PATH" ]; then
            echo "❌ PulsarRPA.jar not found at $JAR_PATH"
            ls -la pulsar-app/pulsar-master/target/ || echo "Target directory not found"
            exit 1
          fi
          echo "✅ PulsarRPA.jar built successfully"

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            pulsar-app/pulsar-master/target/PulsarRPA.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest