name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  # Allow manual workflow runs
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Correct Permissions
        run: |
          find bin/ -name "*.sh" | xargs chmod +x
          chmod +x ./mvnw

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update Version
        run: |
          bin/release/update-versions.sh

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven Build
        run: |
          ./mvnw clean install -DskipTests

      - name: Build Docker image
        if: success()
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Start Docker container
        if: success()
        run: |
          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
          sleep 10  # Wait for Spring Boot to start
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Run curl integration tests
        if: success()
        run: |
          find bin/ -name "*.sh" -exec chmod +x {} \;
          ./bin/run-integration-test.sh || (echo "Integration test failed" && exit 1)

      - name: Stop Docker container
        if: always()
        run: docker stop pulsar-rpa-test || true

      - name: Build PulsarRPA Executable JAR
        if: success()
        run: |
          echo "=== Building PulsarRPA JAR ==="
          ./mvnw package -rf :pulsar-master -pl pulsar-app/pulsar-master \
            -DskipTests=true -Dmaven.javadoc.skip=true -Dmaven.source.skip=true \
            -Dmaven.test.skip=true
          
          JAR_PATH="pulsar-app/pulsar-master/target/PulsarRPA.jar"
          if [ ! -f "$JAR_PATH" ]; then
            echo "❌ PulsarRPA.jar not found at $JAR_PATH"
            ls -la pulsar-app/pulsar-master/target/ || echo "Target directory not found"
            exit 1
          fi
          echo "✅ PulsarRPA.jar built successfully"

      - name: Deploy to Sonatype OSSRH
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "=== Deploying to Maven Central ==="
          ./mvnw --batch-mode deploy -P deploy,release -DskipTests \
            -Dgpg.passphrase="$GPG_PASSPHRASE" \
            -Dgpg.batch=true \
            -Dgpg.pinentry-mode=loopback \
            -DrepositoryId=ossrh \
            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 \
            --show-version --errors
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            pulsar-app/pulsar-master/target/PulsarRPA.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest

      - name: Update Documentation
        if: success()
        run: |
          echo "Updating documentation..."
          ./bin/release/update-documentation.sh
