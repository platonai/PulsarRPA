name: Release

on:
  push:
    tags:
      - "v*"
    paths-ignore:
      - '**.md'
      - 'docs/**'
  # Allow manual workflow runs
  workflow_dispatch:

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if DEEPSEEK_API_KEY is set
        run: |
          if [ -z "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
            echo "DEEPSEEK_API_KEY is not set. Exiting."
            exit 1
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: ${{ secrets.SONATYPE_USERNAME }}
          server-password: ${{ secrets.SONATYPE_PASSWORD }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          cache: 'maven'

      - name: Test Sonatype login via API
        run: |
          curl -u "${{ secrets.SONATYPE_USERNAME }}:${{ secrets.SONATYPE_PASSWORD }}" \
          -X GET "https://oss.sonatype.org/service/local/status"

      - name: Check settings.xml
        run: |
          # Check if settings.xml is correctly configured (without exposing contents)
          if ! grep -q "<id>ossrh</id>" ~/.m2/settings.xml; then
            echo "settings.xml is not configured correctly for Sonatype OSSRH."
            exit 1
          fi
          # Check if GPG configuration exists (using extended regex for any passphrase content)
          if ! grep -E -q "<passphrase>.+</passphrase>" ~/.m2/settings.xml; then
            echo "settings.xml is not configured correctly for gpg-passphrase."
            exit 1
          fi
          echo "settings.xml configuration validated successfully"

      - name: Update Version
        run: |
          chmod +x bin/release/update-versions.sh
          bin/release/update-versions.sh

      - name: Cache Maven wrapper
        uses: actions/cache@v4
        with:
          path: .mvn/wrapper
          key: ${{ runner.os }}-maven-wrapper-${{ hashFiles('**/maven-wrapper.properties') }}

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven build and deploy to local repo
        run: |
          chmod +x ./mvnw
          ./mvnw clean install -DskipTests

      - name: Run Tests
        run: ./mvnw test -Pall-modules

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Test Docker container
        run: |
          # Start container
          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 \
            -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
          
          # Wait for container to be healthy
          echo "Waiting for container to start..."
          for i in {1..30}; do
            if docker exec pulsar-rpa-test curl -f http://localhost:8182/actuator/health 2>/dev/null; then
              echo "Container is healthy"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Container failed to start within 5 minutes"
              docker logs pulsar-rpa-test
              docker stop pulsar-rpa-test || true
              exit 1
            fi
            sleep 10
          done
          
          # Run integration tests
          find bin/ -name "*.sh" -exec chmod +x {} \;
          if ! ./bin/run-integration-test.sh; then
            echo "Integration test failed"
            docker logs pulsar-rpa-test
            docker stop pulsar-rpa-test || true
            exit 1
          fi
          
          # Clean up
          docker stop pulsar-rpa-test || true
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Sonatype OSSRH
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          # Setting comprehensive Maven deploy parameters to ensure compatibility
          ./mvnw deploy -Pplaton-release -Pplaton-deploy -DskipTests -B \
            -DDEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} \
            -Dossrh.username=${SONATYPE_USERNAME} \
            -Dossrh.password=${SONATYPE_PASSWORD} \
            -Dserver.username=${SONATYPE_USERNAME} \
            -Dserver.password=${SONATYPE_PASSWORD} \
            -DSONATYPE_USERNAME=${SONATYPE_USERNAME} \
            -DSONATYPE_PASSWORD=${SONATYPE_PASSWORD} \
            -Dgpg.passphrase=${GPG_PASSPHRASE} \
            -s ~/.m2/settings.xml
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: success()
        run: |
          docker push $IMAGE_NAME:$VERSION || (echo "Failed to push version tag" && exit 1)
          docker push $IMAGE_NAME:latest || (echo "Failed to push latest tag" && exit 1)
