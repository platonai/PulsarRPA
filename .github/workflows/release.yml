name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: false
        type: boolean

env:
  IMAGE_NAME: galaxyeye88/pulsar-rpa
  PRODUCTION_JAR_MODULE_NAME: 'pulsar-master'
  PRODUCTION_JAR_MODULE_PATH: 'pulsar-app/pulsar-master'
  PRODUCTION_JAR_NAME: 'PulsarRPA.jar'
  PRODUCTION_JAR_PATH: 'pulsar-app/pulsar-master/target/PulsarRPA.jar'
  DRAFT: true
  PRERELEASE: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Correct Permissions
        run: |
          find bin/ -name "*.sh" | xargs chmod +x
          chmod +x ./mvnw

      - name: Extract version from tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Update Version
        run: |
          bin/release/update-versions.sh

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven Build
        run: |
          ./mvnw clean install -DskipTests -Pall-modules

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest -f Dockerfile .

      - name: Test Docker container
        if: success()
        run: |
          # Start container
          docker run -d --rm --name pulsar-rpa-test -p 8182:8182 -e DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY} $IMAGE_NAME:$VERSION
          sleep 10  # Wait for Spring Boot to start

          # Run integration tests
          find bin/ -name "*.sh" -exec chmod +x {} \;
          if ! ./bin/run-integration-test.sh; then
            echo "Integration test failed"
            docker logs pulsar-rpa-test
            docker stop pulsar-rpa-test || true
            exit 1
          fi

          # Clean up
          docker stop pulsar-rpa-test || true
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Build PulsarRPA JAR
        if: success()
        run: |
          JAR_PATH=${{ env.PRODUCTION_JAR_PATH }}
          JAR_NAME=${{ env.PRODUCTION_JAR_NAME }}
          MODULE_NAME=${{ env.PRODUCTION_JAR_MODULE_NAME }}
          MODULE_PATH=${{ env.PRODUCTION_JAR_MODULE_PATH }}

          echo "=== Building PulsarRPA JAR ==="
          ./mvnw package -rf :$MODULE_NAME -pl ${MODULE_PATH} -DskipTests=true -Dmaven.javadoc.skip=true

          if [ ! -f "$JAR_PATH" ]; then
            echo "❌ $JAR_NAME.jar not found at $JAR_PATH"
            echo "All created jars: "
            find . -name "$JAR_NAME.jar" -print
            exit 1
          fi
          echo "✅ $JAR_NAME.jar built successfully"

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.TAG }}
          draft: ${{ env.DRAFT }}
          prerelease: ${{ env.PRERELEASE }}
          generate_release_notes: true
          files: |
            ${{ env.PRODUCTION_JAR_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images to Github Container Registry
        if: success()
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag $IMAGE_NAME:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION
          docker tag $IMAGE_NAME:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:latest
          docker push ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION
          docker push ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:latest

      - name: Push Docker Images to Docker Hub
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest

      - name: Update Documents
        if: success()
        run: |
          bin/release/update-documentation.sh
