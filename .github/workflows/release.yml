name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: false
        type: boolean

env:
  IMAGE_NAME: pulsar-rpa
  CONTAINER_NAME: pulsar-rpa
  NETWORK_NAME: 'pulsarrpa_backend'
  DOCKER_USERNAME: galaxyeye88
  PRODUCTION_JAR_MODULE_NAME: 'pulsar-master'
  PRODUCTION_JAR_MODULE_PATH: 'pulsar-app/pulsar-master'
  PRODUCTION_JAR_NAME: 'PulsarRPA.jar'
  PRODUCTION_JAR_PATH: 'pulsar-app/pulsar-master/target/PulsarRPA.jar'
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx3g -XX:+UseG1GC'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Correct Permissions
        run: |
          find bin/ -name "*.sh" | xargs chmod +x
          chmod +x ./mvnw

      - name: Extract version from tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            exit 1
          fi
          
          # Dynamic prerelease detection
          IS_PRERELEASE="false"
          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE="true"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV

      - name: Update Version
        run: |
          bin/release/update-versions.sh

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Maven Build
        run: |
          SKIP_TESTS_FLAG=""
          if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
            SKIP_TESTS_FLAG="-DskipTests"
          fi
          
          ./mvnw clean install $SKIP_TESTS_FLAG -Pall-modules --batch-mode --show-version

      - name: Build Docker image
        run: |
          docker build \
            --build-arg VERSION=${{ env.VERSION }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
            -f Dockerfile .

      - name: Start Docker container for testing
        if: success() && github.event.inputs.skip_tests != 'true'
        run: |
          echo "üß™ Starting Docker container for testing..."
          
          # Create network if it doesn't exist
          docker network create ${{ env.NETWORK_NAME }} || true
          
          # Start container with health check
          docker run -d --rm \
            --name ${{ env.CONTAINER_NAME }} \
            --network ${{ env.NETWORK_NAME }} \
            -p 8182:8182 \
            -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            --health-cmd="curl -f http://localhost:8182/actuator/health || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

          # Wait for container to be healthy
          echo "‚è≥ Waiting for container to be healthy..."
          timeout 120s bash -c 'until docker inspect --format="{{.State.Health.Status}}" ${{ env.CONTAINER_NAME }} | grep -q "healthy"; do sleep 5; done'
          
          echo "‚úÖ Container is healthy and ready for testing"
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      - name: Run Integration Tests
        id: integration-tests
        if: success() && github.event.inputs.skip_tests != 'true'
        uses: ./.github/actions/run-integration-tests
        with:
          script_path: './bin/run-integration-test.sh'
          application_url: 'http://localhost:8182'
          network_name: ${{ env.NETWORK_NAME }}
          container_name: ${{ env.CONTAINER_NAME }}
          timeout_seconds: '600'

      - name: Build PulsarRPA JAR
        if: success()
        run: |
          JAR_PATH=${{ env.PRODUCTION_JAR_PATH }}
          JAR_NAME=${{ env.PRODUCTION_JAR_NAME }}
          MODULE_NAME=${{ env.PRODUCTION_JAR_MODULE_NAME }}
          MODULE_PATH=${{ env.PRODUCTION_JAR_MODULE_PATH }}

          echo "=== Building PulsarRPA JAR ==="
          ./mvnw package -rf :$MODULE_NAME -pl ${MODULE_PATH} -DskipTests=true -Dmaven.javadoc.skip=true

          if [ ! -f "$JAR_PATH" ]; then
            echo "‚ùå $JAR_NAME not found at $JAR_PATH"
            echo "Available JARs:"
            find . -name "*.jar" -type f | head -10
            exit 1
          fi
          echo "‚úÖ $JAR_NAME built successfully"

      - name: Find and Validate JAR
        id: get_uberjar
        if: success()
        run: |
          JAR_PATH=${{ env.PRODUCTION_JAR_PATH }}
          JAR_NAME=${{ env.PRODUCTION_JAR_NAME }}

          echo "::group::üì¶ JAR Discovery and Validation"

          if [ ! -f "$JAR_PATH" ]; then
            echo "‚ùå JAR file not found: $JAR_PATH"
            exit 1
          fi

          JAR_SIZE=$(stat -c%s "$JAR_PATH" 2>/dev/null || echo 0)
          UBERJAR_FILE=$(basename "$JAR_PATH")
          
          echo "‚úÖ Selected JAR: $UBERJAR_FILE"
          echo "üìç Path: $JAR_PATH"
          echo "üìè Size: $JAR_SIZE bytes ($(numfmt --to=iec --suffix=B $JAR_SIZE))"

          # Validate JAR is not empty
          if [ "$JAR_SIZE" -lt 1000000 ]; then
            echo "‚ùå JAR file seems too small (< 1MB): $JAR_SIZE bytes"
            exit 1
          fi

          echo "uberjar_file=$UBERJAR_FILE" >> $GITHUB_OUTPUT
          echo "uberjar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      - name: Create Release Notes
        uses: ./.github/actions/create-release-notes
        id: release-notes
        with:
          version: ${{ env.VERSION }}
          jar_name: ${{ steps.get_uberjar.outputs.uberjar_file }}
          jar_path: ${{ steps.get_uberjar.outputs.uberjar_path }}
          java_version: ${{ env.JAVA_VERSION }}+
          output_file: release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.get_uberjar.outputs.uberjar_path }}
          name: "üöÄ PulsarRPA ${{ env.VERSION }}"
          body_path: release_notes.md
          tag_name: ${{ env.TAG }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }}
          generate_release_notes: true
          make_latest: ${{ env.IS_PRERELEASE == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Release
        run: |
          echo "::group::‚úÖ Release Verification"
          
          JAR_SIZE=$(stat -c%s "${{ steps.get_uberjar.outputs.uberjar_path }}" 2>/dev/null || echo 0)
          
          echo "üéâ Release ${{ env.VERSION }} created successfully!"
          echo ""
          echo "üì¶ Release Details:"
          echo "  - Tag: ${{ env.TAG }}"
          echo "  - JAR: ${{ steps.get_uberjar.outputs.uberjar_file }}"
          echo "  - Size: $(numfmt --to=iec --suffix=B $JAR_SIZE)"
          echo "  - Prerelease: ${{ env.IS_PRERELEASE }}"
          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }}"
          echo ""
          echo "üì• Download Command:"
          echo "wget https://github.com/${{ github.repository }}/releases/download/${{ env.TAG }}/${{ steps.get_uberjar.outputs.uberjar_file }}"
          
          echo "::endgroup::"

      - name: Push Docker Images to Docker Hub
        if: success()
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Images to GitHub Container Registry
        if: success()
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Tag images for GitHub Container Registry
          docker tag ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker tag ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          
          # Push images
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Update Documentation
        uses: ./.github/actions/update-docs
        with:
          version: ${{ env.VERSION }}
          files: '["README.md", "README-CN.md"]'
          commit_message: 'docs: update version references to v{version}'
          push_changes: 'true'
