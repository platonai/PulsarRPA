name: Build & Release JAR

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests during build'
        required: false
        default: false
        type: boolean

env:
  VERSION: ${{ github.ref_name || inputs.tag }}
  NETWORK_NAME: 'pulsarrpa_backend'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1g -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
  PRODUCTION_MODULE: 'pulsar-app/pulsar-master'

jobs:
  build-release:
    runs-on: ubuntu-latest

    outputs:
      jar_name: ${{ steps.get_uberjar.outputs.uberjar_file }}
      jar_path: ${{ steps.get_uberjar.outputs.uberjar_path }}
      version: ${{ env.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Maven dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Version Format
        run: |
          echo "::group::üîç Version Validation"
          
          VERSION="${{ env.VERSION }}"
          echo "Validating version: $VERSION"
          
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid"
          
          CLEAN_VERSION="${VERSION#v}"
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "Clean version: $CLEAN_VERSION"
          
          echo "::endgroup::"

      - name: Run Common Workflow Steps
        uses: ./.github/actions/complete-ci-cd-pipeline
        with:
          image_name: galaxyeye88/pulsar-rpa
          network_name: ${{ env.NETWORK_NAME }}
          image_version: ${{ env.CLEAN_VERSION }}
          deepseek_api_key: ${{ secrets.DEEPSEEK_API_KEY }}
          proxy_rotation_url: ${{ secrets.PROXY_ROTATION_URL }}
          services_to_start: 'mongodb'

      - name: Build Production JAR
        run: |
          echo "::group::üèóÔ∏è Building Production JAR"
          
          echo "üìã Build Configuration:"
          echo "  - Version: ${{ env.CLEAN_VERSION }}"
          echo "  - Skip Tests: always"
          echo "  - Maven Opts: $MAVEN_OPTS"
          
          # Check if Maven wrapper exists
          if [ ! -f "./mvnw" ]; then
            echo "‚ùå Maven wrapper (mvnw) not found in root directory"
            exit 1
          fi
          
          # Update version in POM if needed
          CURRENT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [ "${{ env.CLEAN_VERSION }}" != "$CURRENT_VERSION" ]; then
            echo "üîÑ Updating project version from $CURRENT_VERSION to ${{ env.CLEAN_VERSION }}"
            ./mvnw versions:set -DnewVersion=${{ env.CLEAN_VERSION }} -DgenerateBackupPoms=false
          fi

          # Build arguments
          BUILD_ARGS="clean install -Dmaven.javadoc.skip=true -DskipTests"
          
          echo "üöÄ Starting Maven build with args: $BUILD_ARGS"
          
          PRODUCTION_MODULE=${{ env.PRODUCTION_MODULE }}
          echo "Building production in $PRODUCTION_MODULE ..."
          cd "$PRODUCTION_MODULE" || exit
          if ! ./mvnw $BUILD_ARGS; then
            echo "‚ùå Maven build failed"
            exit 1
          fi
          
          # Return to root directory
          cd - || exit 1
          
          echo "‚úÖ JAR build completed successfully"
          echo "::endgroup::"

      - name: Find and Validate JAR
        id: get_uberjar
        run: |
          echo "::group::üì¶ JAR Discovery and Validation"
          
          echo "üîç Searching for executable JAR files..."
          
          # Updated search patterns to match actual build structure
          JAR_CANDIDATES=(
            "target/PulsarRPA.jar"      # Default Version
            "target/PulsarRPAVc.jar"    # Version Scent
            "target/PulsarRPAPro.jar"   # Pro Version
          )
          
          FOUND_JARS=()
          for pattern in "${JAR_CANDIDATES[@]}"; do
            while IFS= read -r -d '' jar; do
              if [ -f "$jar" ] && [[ ! "$jar" =~ (sources|javadoc|original)\.jar$ ]]; then
                FOUND_JARS+=("$jar")
              fi
            done < <(find . -path "$pattern" -print0 2>/dev/null)
          done
          
          if [ ${#FOUND_JARS[@]} -eq 0 ]; then
            echo "‚ùå No executable JAR found!"
            echo "Searched patterns:"
            printf '  - %s\n' "${JAR_CANDIDATES[@]}"
            echo ""
            echo "Available files in target directories:"
            find . -name target -type d -exec find {} -name "*.jar" \; 2>/dev/null || true
            exit 1
          fi
          
          # Select the largest JAR (likely the uber jar)
          UBERJAR_PATH=""
          MAX_SIZE=0
          
          for jar in "${FOUND_JARS[@]}"; do
            size=$(stat -c%s "$jar" 2>/dev/null || echo 0)
            echo "üìÑ Found: $(basename "$jar") (${size} bytes)"
            if [ "$size" -gt "$MAX_SIZE" ]; then
              MAX_SIZE=$size
              UBERJAR_PATH="$jar"
            fi
          done
          
          UBERJAR_FILE=$(basename "$UBERJAR_PATH")
          
          echo ""
          echo "‚úÖ Selected JAR: $UBERJAR_FILE"
          echo "üìç Path: $UBERJAR_PATH"
          echo "üìè Size: $MAX_SIZE bytes ($(numfmt --to=iec --suffix=B $MAX_SIZE))"

          echo "uberjar_file=$UBERJAR_FILE" >> $GITHUB_OUTPUT
          echo "uberjar_path=$UBERJAR_PATH" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      - name: Create Release Notes
        id: release_notes
        run: |
          echo "::group::üìù Generating Release Notes"
          
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "üìã Changes since $PREV_TAG:"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD)
          else
            echo "üìã Initial release changes:"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD~10..HEAD)
          fi
          
          JAR_SIZE=$(stat -c%s "${{ steps.get_uberjar.outputs.uberjar_path }}" 2>/dev/null || echo 0)
          
          cat > release_notes.md << EOF
          ## Release ${{ env.VERSION }}
          
          ### üì¶ Artifacts
          - **JAR File**: \`${{ steps.get_uberjar.outputs.uberjar_file }}\`
          - **Size**: $(numfmt --to=iec --suffix=B $JAR_SIZE)
          - **Java Version**: 17+
          
          ### üîÑ Changes
          $CHANGELOG
          
          ### üöÄ Usage
          \`\`\`bash
          java -jar ${{ steps.get_uberjar.outputs.uberjar_file }}
          \`\`\`
          
          Built on $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md
          echo "::endgroup::"

      - name: Upload JAR to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.get_uberjar.outputs.uberjar_path }}
          name: Release ${{ env.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(env.VERSION, '-') }}
          generate_release_notes: true
          make_latest: ${{ !contains(env.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Release
        run: |
          echo "::group::‚úÖ Release Verification"
          
          JAR_SIZE=$(stat -c%s "${{ steps.get_uberjar.outputs.uberjar_path }}" 2>/dev/null || echo 0)
          
          echo "üéâ Release ${{ env.VERSION }} created successfully!"
          echo ""
          echo "üì¶ Release Details:"
          echo "  - Tag: ${{ env.VERSION }}"
          echo "  - JAR: ${{ steps.get_uberjar.outputs.uberjar_file }}"
          echo "  - Size: $(numfmt --to=iec --suffix=B $JAR_SIZE)"
          echo "  - Prerelease: ${{ contains(env.VERSION, '-') }}"
          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }}"
          echo ""
          echo "üì• Download Command:"
          echo "wget https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/${{ steps.get_uberjar.outputs.uberjar_file }}"
          
          echo "::endgroup::"

      - name: Cleanup Resources
        if: always()
        run: |
          echo "::group::üßπ Cleanup"
          
          echo "üê≥ Stopping Docker containers..."
          docker compose down --remove-orphans --volumes 2>/dev/null || true
          
          echo "üóëÔ∏è Cleaning up temporary files..."
          rm -f release_notes.md
          
          # Clean Maven target if cache was not hit
          if [ "${{ steps.cache.outputs.cache-hit }}" != "true" ]; then
            echo "üßΩ Cleaning Maven artifacts..."
            ./mvnw clean 2>/dev/null || true
          fi
          
          echo "‚úÖ Cleanup completed"
          echo "::endgroup::"

      - name: Post-build Summary
        if: always()
        run: |
          echo "::group::üìä Build Summary"
          
          echo "üèóÔ∏è Build Results:"
          echo "  - Status: ${{ job.status }}"
          echo "  - Version: ${{ env.VERSION }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "  - JAR: ${{ steps.get_uberjar.outputs.uberjar_file }}"
            echo "  - Release: ‚úÖ Created"
          else
            echo "  - Release: ‚ùå Failed"
          fi
          
          echo ""
          echo "üìÖ Completed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          echo "::endgroup::"