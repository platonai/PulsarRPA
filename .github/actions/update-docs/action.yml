name: Update Documentation
description: Updates version references in documentation files
author: platonai
branding:
  icon: 'book-open'
  color: 'blue'

inputs:
  version:
    description: 'The version to update to (e.g., 1.0.0)'
    required: true
  files:
    description: 'Documentation files to update (JSON array)'
    required: false
    default: '["README.md", "README-CN.md"]'
  commit_message:
    description: 'Git commit message template (use {version} as placeholder)'
    required: false
    default: 'docs: update documentation for version v{version}'
  push_changes:
    description: 'Whether to commit and push changes'
    required: false
    default: 'true'
  old_version_pattern:
    description: 'Pattern to match old versions (e.g., 1.0.* for patch updates)'
    required: false
    default: ''

outputs:
  updated_files:
    description: 'List of files that were updated'
    value: ${{ steps.update-docs.outputs.updated_files }}
  version:
    description: 'The version that was used for updates'
    value: ${{ steps.update-docs.outputs.version }}
  changes_made:
    description: 'Boolean indicating if any changes were made'
    value: ${{ steps.update-docs.outputs.changes_made }}

runs:
  using: "composite"
  steps:
    - name: Update Documentation
      id: update-docs
      shell: bash
      run: |
        set -euo pipefail
        
        VERSION="${{ inputs.version }}"
        OLD_PATTERN="${{ inputs.old_version_pattern }}"
        
        echo "üîÑ Updating documentation..."
        echo "üìÖ Current Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Validate version input
        if [ -z "$VERSION" ]; then
          echo "‚ùå Error: version input is required"
          exit 1
        fi
        
        # Clean version (remove v prefix if present)
        VERSION=$(echo "$VERSION" | sed 's/^v//')
        
        # Validate version format
        if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "‚ùå Error: Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z (e.g., 1.0.0)"
          exit 1
        fi
        
        # Extract version prefix for pattern matching
        PREFIX=$(echo "$VERSION" | cut -d'.' -f1,2)
        
        echo "üì¶ Version Info:"
        echo "   Target Version: v$VERSION"
        echo "   Version Prefix: $PREFIX"
        if [ -n "$OLD_PATTERN" ]; then
          echo "   Old Pattern: $OLD_PATTERN"
        fi
        
        # Validate JSON input
        if ! echo '${{ inputs.files }}' | jq empty 2>/dev/null; then
          echo "‚ùå Error: Invalid JSON in files input"
          exit 1
        fi
        
        # Parse input files
        if ! FILES_LIST=$(echo '${{ inputs.files }}' | jq -r '.[]' 2>/dev/null); then
          echo "‚ùå Error: Failed to parse files JSON"
          exit 1
        fi
        
        echo "üîç Processing files..."
        UPDATED_FILES=()
        PROCESSED_COUNT=0
        SKIPPED_COUNT=0
        
        while IFS= read -r FILE_NAME; do
          [ -z "$FILE_NAME" ] && continue
        
          F="${FILE_NAME}"
          PROCESSED_COUNT=$((PROCESSED_COUNT + 1))
        
          if [ -e "$F" ]; then
            echo "  üìÑ Processing: $(basename "$F")"
        
            # Create backup
            if ! cp "$F" "$F.backup"; then
              echo "    ‚ùå Failed to create backup for $F"
              continue
            fi
        
            CHANGES_MADE=false
        
            # Replace SNAPSHOT versions if they exist
            SNAPSHOT_VERSION="${VERSION}-SNAPSHOT"
            if grep -q "\b${SNAPSHOT_VERSION}\b" "$F" 2>/dev/null; then
              sed -i "s/\b${SNAPSHOT_VERSION}\b/v${VERSION}/g" "$F"
              CHANGES_MADE=true
              echo "    üîÑ Replaced SNAPSHOT: $SNAPSHOT_VERSION ‚Üí v$VERSION"
            fi
        
            # Replace old versions based on pattern or prefix
            if [ -n "$OLD_PATTERN" ]; then
              # Use custom pattern
              OLD_VERSIONS=$(grep -oE "\bv?${OLD_PATTERN}\b" "$F" 2>/dev/null | sort -u || true)
            else
              # Use prefix-based pattern (e.g., 1.0.x)
              OLD_VERSIONS=$(grep -oE "\bv?${PREFIX}\.[0-9]+\b" "$F" 2>/dev/null | sort -u || true)
            fi
        
            for OLD_VERSION in $OLD_VERSIONS; do
              # Clean version without 'v' prefix for comparison
              CLEAN_OLD=$(echo "$OLD_VERSION" | sed 's/^v//')
        
              if [[ "$CLEAN_OLD" != "$VERSION" ]]; then
                sed -i "s/\b${OLD_VERSION}\b/v${VERSION}/g" "$F"
                CHANGES_MADE=true
                echo "    üîÑ Replaced: $OLD_VERSION ‚Üí v$VERSION"
              fi
            done
        
            # Check if file was actually modified
            if [ "$CHANGES_MADE" = true ] && ! cmp -s "$F" "$F.backup"; then
              UPDATED_FILES+=("$F")
              echo "    ‚úÖ File updated successfully"
            else
              echo "    ‚ÑπÔ∏è  No changes needed"
            fi
        
            # Remove backup
            rm -f "$F.backup"
          else
            echo "  ‚ö†Ô∏è  File not found: $F"
            SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
          fi
        done <<< "$FILES_LIST"
        
        echo ""
        echo "üìä Processing Summary:"
        echo "   - Files processed: $PROCESSED_COUNT"
        echo "   - Files updated: ${#UPDATED_FILES[@]}"
        echo "   - Files skipped: $SKIPPED_COUNT"
        
        # Export outputs
        UPDATED_FILES_JSON=$(printf '%s\n' "${UPDATED_FILES[@]}" | jq -R . | jq -s .)
        echo "updated_files=$UPDATED_FILES_JSON" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "changes_made=$([ ${#UPDATED_FILES[@]} -gt 0 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        
        if [ ${#UPDATED_FILES[@]} -eq 0 ]; then
          echo "‚ÑπÔ∏è  No files were updated."
          exit 0
        fi
        
        echo "‚úÖ Documentation updated to version v$VERSION"
        echo "üìù Files updated:"
        for file in "${UPDATED_FILES[@]}"; do
          echo "   - $(basename "$file")"
        done
        
        # Commit and push changes if enabled
        if [ "${{ inputs.push_changes }}" == "true" ]; then
          COMMIT_MSG=$(echo '${{ inputs.commit_message }}' | sed "s/{version}/$VERSION/g")
        
          echo ""
          echo "üîç Committing changes..."
        
          # Configure git user
          git config --global user.name "${GITHUB_ACTOR:-github-actions}"
          git config --global user.email "${GITHUB_ACTOR:-github-actions}@users.noreply.github.com"
        
          # Add, commit and push changes
          git add -- "${UPDATED_FILES[@]}"
          git commit -m "$COMMIT_MSG"
          git push
        
          echo "‚úÖ Changes committed and pushed"
        fi
